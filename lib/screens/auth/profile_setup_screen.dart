import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'dart:io';
import '../main/main_navigation.dart';
import '../../services/s3_uploader.dart';
import '../../services/api/service.dart';

class ProfileSetupScreen extends StatefulWidget {
  final String? phone; // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ
  final bool isEditing; // –§–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  const ProfileSetupScreen({
    super.key,
    this.phone,
    this.isEditing = false,
  });

  @override
  State<ProfileSetupScreen> createState() => _ProfileSetupScreenState();
}

class _ProfileSetupScreenState extends State<ProfileSetupScreen> {
  final _formKey = GlobalKey<FormState>();
  final _fullNameController = TextEditingController();
  final _nicknameController = TextEditingController();
  final _birthdateController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();

  File? _profileImage;
  final ImagePicker _picker = ImagePicker();
  bool _isLoading = false;
  bool _isLoadingProfile = true;
  DateTime? _selectedDate;
  Map<String, dynamic>? _currentProfile;
  String? _currentAvatarUrl; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞

  @override
  void initState() {
    super.initState();
    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if (widget.phone != null) {
      _phoneController.text = widget.phone!;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    if (widget.isEditing) {
      _loadCurrentProfile();
    } else {
      _isLoadingProfile = false;
    }
  }

  Future<void> _loadCurrentProfile() async {
    try {
      final profile = await ApiService.user.getProfile();
      print('üîç –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: $profile');
      if (profile != null && mounted) {
        _currentProfile = profile;

        // –í–ê–ñ–ù–û: –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–æ setState
        _prefillFieldsWithoutSetState();

        // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º UI –æ–¥–Ω–∏–º setState
        setState(() {
          _isLoadingProfile = false;
        });
      }
    } catch (e) {
      print('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: $e');
      if (mounted) {
        setState(() {
          _isLoadingProfile = false;
        });
      }
    }
  }

  void _prefillFieldsWithoutSetState() {
    if (_currentProfile == null) {
      print('‚ùå _currentProfile is null');
      return;
    }

    print('‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏: $_currentProfile');

    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
    if (_currentProfile!['fullName'] != null) {
      _fullNameController.text = _currentProfile!['fullName'];
      print('‚úÖ FullName: ${_currentProfile!['fullName']}');
    }

    if (_currentProfile!['nickname'] != null) {
      _nicknameController.text = _currentProfile!['nickname'];
      print('‚úÖ Nickname: ${_currentProfile!['nickname']}');
    }

    if (_currentProfile!['email'] != null) {
      _emailController.text = _currentProfile!['email'];
      print('‚úÖ Email: ${_currentProfile!['email']}');
    }

    if (_currentProfile!['phone'] != null) {
      _phoneController.text = _currentProfile!['phone'];
      print('‚úÖ Phone: ${_currentProfile!['phone']}');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    if (_currentProfile!['avatarUrl'] != null && _currentProfile!['avatarUrl'].toString().isNotEmpty) {
      _currentAvatarUrl = _currentProfile!['avatarUrl'];
      print('‚úÖ Avatar URL –Ω–∞–π–¥–µ–Ω: $_currentAvatarUrl');
    } else {
      print('‚ùå AvatarUrl –ø—É—Å—Ç–æ–π –∏–ª–∏ null: ${_currentProfile!['avatarUrl']}');
    }

    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    if (_currentProfile!['birthdate'] != null) {
      try {
        final birthDate = DateTime.parse(_currentProfile!['birthdate']);
        _selectedDate = birthDate;
        _birthdateController.text = '${birthDate.day.toString().padLeft(2, '0')}/${birthDate.month.toString().padLeft(2, '0')}/${birthDate.year}';
        print('‚úÖ Birthdate: ${_birthdateController.text}');
      } catch (e) {
        print('üî• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: $e');
      }
    }
  }

  @override
  void dispose() {
    _fullNameController.dispose();
    _nicknameController.dispose();
    _birthdateController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' : '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SafeArea(
        child: _isLoadingProfile
            ? const Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è...'),
            ],
          ),
        )
            : SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                // Profile Photo - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
                Center(
                  child: Stack(
                    children: [
                      Container(
                        width: 120,
                        height: 120,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.grey[200],
                          image: _getDecorationImage(),
                        ),
                        child: _getDecorationImage() == null
                            ? const Icon(Icons.person, size: 60, color: Colors.grey)
                            : null,
                      ),
                      Positioned(
                        bottom: 0,
                        right: 0,
                        child: Container(
                          decoration: const BoxDecoration(
                            color: Color(0xFF2E7D5F),
                            shape: BoxShape.circle,
                          ),
                          child: IconButton(
                            icon: const Icon(Icons.edit, color: Colors.white, size: 20),
                            onPressed: _pickImage,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 24),

                TextFormField(
                  controller: _fullNameController,
                  decoration: const InputDecoration(
                    hintText: '–ü–æ–ª–Ω–æ–µ –∏–º—è',
                    prefixIcon: Icon(Icons.person_outline),
                  ),
                  textCapitalization: TextCapitalization.words,
                  validator: (value) {
                    if (value?.trim().isEmpty ?? true) {
                      return '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è';
                    }
                    return null;
                  },
                ),

                const SizedBox(height: 16),

                TextFormField(
                  controller: _nicknameController,
                  decoration: const InputDecoration(
                    hintText: '–ù–∏–∫–Ω–µ–π–º (a-z, 0-9, _)',
                    prefixIcon: Icon(Icons.alternate_email),
                    helperText: '–¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ',
                  ),
                  textCapitalization: TextCapitalization.none,
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(RegExp(r'^[a-zA-Z0-9_]*$')),
                    LengthLimitingTextInputFormatter(20),
                  ],
                  validator: (value) {
                    if (value != null && value.isNotEmpty) {
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫–Ω–µ–π–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã
                      if (!RegExp(r'^[a-zA-Z]').hasMatch(value)) {
                        return '–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã';
                      }
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                      if (value.length < 3) {
                        return '–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
                      }
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
                      if (value.endsWith('_')) {
                        return '–ù–µ –º–æ–∂–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _';
                      }
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –¥–≤–æ–π–Ω—ã—Ö –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
                      if (value.contains('__')) {
                        return '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å __ –ø–æ–¥—Ä—è–¥';
                      }
                    }
                    return null;
                  },
                  onChanged: (value) {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                    if (value != value.toLowerCase()) {
                      _nicknameController.value = _nicknameController.value.copyWith(
                        text: value.toLowerCase(),
                        selection: TextSelection.collapsed(offset: value.toLowerCase().length),
                      );
                    }
                  },
                ),

                const SizedBox(height: 24),

                TextFormField(
                  controller: _birthdateController,
                  decoration: const InputDecoration(
                    hintText: '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
                    suffixIcon: Icon(Icons.calendar_today),
                  ),
                  readOnly: true,
                  onTap: _selectDate,
                ),

                const SizedBox(height: 16),

                TextFormField(
                  controller: _emailController,
                  decoration: const InputDecoration(
                    hintText: '–≠–ª. –ø–æ—á—Ç–∞',
                    suffixIcon: Icon(Icons.email),
                  ),
                  keyboardType: TextInputType.emailAddress,
                ),

                const SizedBox(height: 16),

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –ù–ï –ø–µ—Ä–µ–¥–∞–Ω
                if (widget.phone == null) ...[
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                        decoration: BoxDecoration(
                          border: Border.all(color: Colors.grey[300]!),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Row(
                          children: [
                            Image.asset(
                              'assets/images/us_flag.png',
                              width: 24,
                              height: 16,
                              errorBuilder: (context, error, stackTrace) {
                                return Container(
                                  width: 24,
                                  height: 16,
                                  color: Colors.blue,
                                  child: const Icon(Icons.flag, size: 12, color: Colors.white),
                                );
                              },
                            ),
                            const SizedBox(width: 8),
                            const Text('+1'),
                          ],
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: TextFormField(
                          controller: _phoneController,
                          decoration: const InputDecoration(
                            hintText: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                          ),
                          keyboardType: TextInputType.phone,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                ] else ...[
                  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ read-only
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey[50],
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey[300]!),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.phone, color: Colors.grey[600]),
                        const SizedBox(width: 12),
                        Text(
                          widget.phone!,
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.grey[800],
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const Spacer(),
                        const Icon(
                          Icons.check_circle,
                          color: Color(0xFF2E7D5F),
                          size: 20,
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                ],

                const SizedBox(height: 32),

                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: _isLoading ? null : _completeProfile,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF2E7D5F),
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: _isLoading
                        ? const SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                        : Text(
                      widget.isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  DecorationImage? _getDecorationImage() {
    print('üñºÔ∏è _getDecorationImage called');
    print('   _profileImage: ${_profileImage != null ? "–µ—Å—Ç—å" : "–Ω–µ—Ç"}');
    print('   _currentAvatarUrl: $_currentAvatarUrl');

    if (_profileImage != null) {
      print('   ‚Üí –í–æ–∑–≤—Ä–∞—â–∞–µ–º FileImage');
      return DecorationImage(
        image: FileImage(_profileImage!),
        fit: BoxFit.cover,
      );
    } else if (_currentAvatarUrl != null && _currentAvatarUrl!.isNotEmpty) {
      print('   ‚Üí –í–æ–∑–≤—Ä–∞—â–∞–µ–º NetworkImage –¥–ª—è: $_currentAvatarUrl');
      return DecorationImage(
        image: NetworkImage(_currentAvatarUrl!),
        fit: BoxFit.cover,
        onError: (error, stackTrace) {
          print('‚ùå –û—à–∏–±–∫–∞ DecorationImage: $error');
        },
      );
    }
    print('   ‚Üí –í–æ–∑–≤—Ä–∞—â–∞–µ–º null');
    return null;
  }

  Future<void> _pickImage() async {
    final XFile? image = await _picker.pickImage(
      source: ImageSource.gallery,
      maxWidth: 1024, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —É–∂–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
      maxHeight: 1024,
      imageQuality: 85, // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
    );

    if (image != null) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∂–∞—Ç–∏—è
      _showUploadingSnackBar('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ...');

      try {
        // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        final compressedFile = await _compressImage(File(image.path));

        if (compressedFile != null) {
          setState(() {
            _profileImage = compressedFile;
          });

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
          final sizeInKB = (await compressedFile.length()) / 1024;
          ScaffoldMessenger.of(context).hideCurrentSnackBar();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ! –†–∞–∑–º–µ—Ä: ${sizeInKB.toStringAsFixed(0)} –ö–ë'),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 2),
            ),
          );
        } else {
          ScaffoldMessenger.of(context).hideCurrentSnackBar();
          _showErrorDialog('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
        }
      } catch (e) {
        ScaffoldMessenger.of(context).hideCurrentSnackBar();
        _showErrorDialog('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: $e');
      }
    }
  }

  Future<File?> _compressImage(File file) async {
    try {
      final dir = await getTemporaryDirectory();
      final targetPath = p.join(
          dir.path,
          'compressed_${DateTime.now().millisecondsSinceEpoch}.jpg'
      );

      // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final compressedFile = await FlutterImageCompress.compressAndGetFile(
        file.absolute.path,
        targetPath,
        quality: 80,
        minWidth: 400,
        minHeight: 400,
        format: CompressFormat.jpeg,
      );

      if (compressedFile != null) {
        return File(compressedFile.path);
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
    }
    return null;
  }

  Future<void> _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );
    if (picked != null) {
      setState(() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        _birthdateController.text = '${picked.day.toString().padLeft(2, '0')}/${picked.month.toString().padLeft(2, '0')}/${picked.year}';
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        _selectedDate = picked;
      });
    }
  }

  Future<void> _completeProfile() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      String? avatarUrl;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –≤ S3, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
      if (_profileImage != null) {
        _showUploadingSnackBar('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ...');
        avatarUrl = await S3Uploader.uploadFile(_profileImage!, 'avatars');
        if (avatarUrl == null) {
          _showErrorDialog('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          return;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –±—ç–∫–µ–Ω–¥
      _showUploadingSnackBar('–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
      final Map<String, dynamic> profileData = {};

      if (_fullNameController.text.trim().isNotEmpty) {
        profileData['fullName'] = _fullNameController.text.trim();
      }
      if (_nicknameController.text.trim().isNotEmpty) {
        profileData['nickname'] = _nicknameController.text.trim();
      }
      if (_emailController.text.trim().isNotEmpty) {
        profileData['email'] = _emailController.text.trim();
      }
      if (_selectedDate != null) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ ISO-8601 —Ñ–æ—Ä–º–∞—Ç–µ
        profileData['birthdate'] = _selectedDate!.toIso8601String();
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
      if (avatarUrl != null) {
        profileData['avatarUrl'] = avatarUrl;
      } else if (widget.isEditing && _currentAvatarUrl != null) {
        // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤–∞—Ç–∞—Ä
        profileData['avatarUrl'] = _currentAvatarUrl;
      }

      final success = await ApiService.user.updateProfile(profileData);

      if (!mounted) return;

      if (success) {
        _showSuccessSnackBar('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await Future.delayed(const Duration(milliseconds: 1500));

        if (mounted) {
          if (widget.isEditing) {
            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
            Navigator.pop(context, true); // true –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
          } else {
            // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            Navigator.pushAndRemoveUntil(
              context,
              MaterialPageRoute(builder: (context) => const MainNavigation()),
                  (route) => false,
            );
          }
        }
      } else {
        _showErrorDialog('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
      }
    } catch (e) {
      if (mounted) {
        _showErrorDialog('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _showUploadingSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            ),
            const SizedBox(width: 12),
            Text(message),
          ],
        ),
        backgroundColor: const Color(0xFF2E7D5F),
        duration: const Duration(seconds: 30),
      ),
    );
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).hideCurrentSnackBar();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.check_circle, color: Colors.white),
            const SizedBox(width: 12),
            Text(message),
          ],
        ),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  void _showErrorDialog(String message) {
    ScaffoldMessenger.of(context).hideCurrentSnackBar();
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–û—à–∏–±–∫–∞'),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              'OK',
              style: TextStyle(color: Color(0xFF2E7D5F)),
            ),
          ),
        ],
      ),
    );
  }
}