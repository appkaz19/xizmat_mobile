import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:shared_preferences/shared_preferences.dart';

class SocketService {
  static SocketService? _instance;
  IO.Socket? _socket;
  bool _isConnected = false;

  // Singleton pattern
  static SocketService get instance {
    _instance ??= SocketService._internal();
    return _instance!;
  }

  SocketService._internal();

  bool get isConnected => _isConnected;

  // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  final List<void Function(Map<String, dynamic>)> _newMessageListeners = [];
  Function()? onConnect;
  Function()? onDisconnect;

  /// –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  void addNewMessageListener(void Function(Map<String, dynamic>) listener) {
    if (!_newMessageListeners.contains(listener)) {
      _newMessageListeners.add(listener);
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  void removeNewMessageListener(void Function(Map<String, dynamic>) listener) {
    _newMessageListeners.remove(listener);
  }

  Future<void> connect() async {
    if (_socket != null && _isConnected) {
      print('Socket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    try {
      final token = await _getAuthToken();
      if (token == null) {
        print('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç—É');
        return;
      }

      print('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –ø–æ HTTP –Ω–∞ –ø–æ—Ä—Ç—É 6969...');

      _socket = IO.io(
        'http://uzxizmat.uz:6969', // –ò–°–ü–†–ê–í–ò–õ–ò: http –≤–º–µ—Å—Ç–æ https
        IO.OptionBuilder()
            .setTransports(['websocket'])
            .setExtraHeaders({'Content-Type': 'application/json'}) // –ö–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            .setAuth({'token': token}) // –¢–æ—á–Ω–æ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            .enableAutoConnect()
            .setTimeout(10000)
            .build(),
      );

      _socket!.onConnect((_) {
        print('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ HTTP –Ω–∞ –ø–æ—Ä—Ç—É 6969');
        _isConnected = true;
        onConnect?.call();
      });

      _socket!.onDisconnect((reason) {
        print('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: $reason');
        _isConnected = false;
        onDisconnect?.call();
      });

      _socket!.onConnectError((error) {
        print('üî• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: $error');
        _isConnected = false;
      });

      _socket!.onError((error) {
        print('üî• WebSocket –æ—à–∏–±–∫–∞: $error');
      });

      // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
      _socket!.on('newMessage', (data) {
        print('üì® RAW –¥–∞–Ω–Ω—ã–µ –∏–∑ newMessage: $data');
        print('üì® –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${data.runtimeType}');
        Map<String, dynamic>? parsed;
        if (data is Map<String, dynamic>) {
          parsed = data;
        } else if (data is Map) {
          parsed = Map<String, dynamic>.from(data);
        }

        if (parsed != null) {
          print('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: $parsed');
          for (final listener in List.from(_newMessageListeners)) {
            listener(parsed);
          }
        } else {
          print('üì® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: $data');
        }
      });

      // –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      _socket!.on('connect', (_) {
        print('üîó Socket.IO connect —Å–æ–±—ã—Ç–∏–µ');
      });

      _socket!.on('disconnect', (reason) {
        print('üíî Socket.IO disconnect: $reason');
      });

      // –°–ª—É—à–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      _socket!.onAny((event, data) {
        print('üî• Socket —Å–æ–±—ã—Ç–∏–µ: $event, –¥–∞–Ω–Ω—ã–µ: $data');
      });

      _socket!.connect();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WebSocket: $e');
    }
  }

  Future<String?> _getAuthToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  void joinChat(String chatId) {
    if (_socket != null && _isConnected) {
      print('üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É: $chatId');
      print('üîó Socket –ø–æ–¥–∫–ª—é—á–µ–Ω: $_isConnected');
      print('üîó Socket —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${_socket!.connected}');
      _socket!.emit('joinChat', chatId); // –¢–æ—á–Ω–æ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

      // –î–æ–±–∞–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      print('üîó –°–æ–±—ã—Ç–∏–µ joinChat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞: $chatId');
    } else {
      print('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      print('‚ùå Socket: $_socket, Connected: $_isConnected');
    }
  }

  void leaveChat(String chatId) {
    if (_socket != null && _isConnected) {
      print('üëã –ü–æ–∫–∏–¥–∞–µ–º —á–∞—Ç: $chatId');
      // –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ—Ç leaveChat, –Ω–æ –ª–æ–≥–∏—á–Ω–æ —á—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
      _socket!.emit('leaveChat', chatId);
    }
  }

  void sendMessage(String chatId, String content) {
    // –£–ë–†–ê–õ–ò –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ WebSocket!
    // –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ HTTP API
    // WebSocket –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    print('üì§ WebSocket sendMessage –≤—ã–∑–≤–∞–Ω, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ HTTP API)');
    print('üì§ ChatId: $chatId, Content: $content');
  }

  void disconnect() {
    if (_socket != null) {
      print('üîå –û—Ç–∫–ª—é—á–∞–µ–º WebSocket');
      _socket!.disconnect();
      _socket = null;
      _isConnected = false;
    }
  }

  void dispose() {
    disconnect();
    _newMessageListeners.clear();
    onConnect = null;
    onDisconnect = null;
  }
}