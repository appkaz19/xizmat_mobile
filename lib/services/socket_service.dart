import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:shared_preferences/shared_preferences.dart';

class SocketService {
  static SocketService? _instance;
  IO.Socket? _socket;
  bool _isConnected = false;
  final Set<String> _pendingChats = {};

  // Singleton pattern
  static SocketService get instance {
    _instance ??= SocketService._internal();
    return _instance!;
  }

  SocketService._internal();

  bool get isConnected => _isConnected;

  // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  final List<void Function(Map<String, dynamic>)> _newMessageListeners = [];
  Function()? onConnect;
  Function()? onDisconnect;

  /// –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  void addNewMessageListener(void Function(Map<String, dynamic>) listener) {
    if (!_newMessageListeners.contains(listener)) {
      _newMessageListeners.add(listener);
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  void removeNewMessageListener(void Function(Map<String, dynamic>) listener) {
    _newMessageListeners.remove(listener);
  }

  Future<void> connect() async {
    if (_socket != null && _isConnected) {
      print('Socket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    try {
      final token = await _getAuthToken();
      if (token == null) {
        print('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ–∫–µ—Ç—É');
        return;
      }

      print('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –ø–æ HTTP –Ω–∞ –ø–æ—Ä—Ç—É 6969...');

      _socket = IO.io(
        'http://192.168.161.79:6969',
        IO.OptionBuilder()
            .setTransports(['websocket'])
            .setExtraHeaders({'Content-Type': 'application/json'})
            .setAuth({'token': token})
            .enableAutoConnect()
            .setTimeout(10000)
            .build(),
      );

      _socket!.onConnect((_) {
        print('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ HTTP –Ω–∞ –ø–æ—Ä—Ç—É 6969');
        _isConnected = true;
        for (final chatId in _pendingChats) {
          _socket!.emit('joinChat', chatId);
          print('üîó –ê–≤—Ç–æ join –∫ —á–∞—Ç—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $chatId');
        }
        _pendingChats.clear();
        onConnect?.call();
      });

      _socket!.onDisconnect((reason) {
        print('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: $reason');
        _isConnected = false;
        onDisconnect?.call();
      });

      _socket!.onConnectError((error) {
        print('üî• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: $error');
        _isConnected = false;
      });

      _socket!.onError((error) {
        print('üî• WebSocket –æ—à–∏–±–∫–∞: $error');
      });

      // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      _socket!.on('newMessage', (data) {
        print('üì® SocketService: RAW –¥–∞–Ω–Ω—ã–µ –∏–∑ newMessage: $data');
        print('üì® SocketService: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${data.runtimeType}');
        print('üì® SocketService: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: ${_newMessageListeners.length}');

        Map<String, dynamic>? parsed;
        if (data is Map<String, dynamic>) {
          parsed = data;
        } else if (data is Map) {
          parsed = Map<String, dynamic>.from(data);
        }

        if (parsed != null) {
          print('üì® SocketService: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: $parsed');
          print('üì® SocketService: –£–≤–µ–¥–æ–º–ª—è–µ–º ${_newMessageListeners.length} —Å–ª—É—à–∞—Ç–µ–ª–µ–π');

          for (final listener in List.from(_newMessageListeners)) {
            try {
              listener(parsed);
              print('üì® SocketService: –°–ª—É—à–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } catch (e) {
              print('üì® SocketService: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: $data');
            }
          }
        } else {
          print('üì® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: $data');
        }
      });

      _socket!.connect();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WebSocket: $e');
    }
  }

  Future<String?> _getAuthToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  void joinChat(String chatId) {
    if (_socket != null && _isConnected) {
      print('üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É: $chatId');
      _socket!.emit('joinChat', chatId);
      print('üîó –°–æ–±—ã—Ç–∏–µ joinChat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞: $chatId');
    } else {
      print('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      _pendingChats.add(chatId);
      print('üîó –ß–∞—Ç $chatId –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
  }

  void leaveChat(String chatId) {
    if (_socket != null && _isConnected) {
      print('üëã –ü–æ–∫–∏–¥–∞–µ–º —á–∞—Ç: $chatId');
      _socket!.emit('leaveChat', chatId);
    }
    _pendingChats.remove(chatId);
  }

  void sendMessage(String chatId, String content) {
    if (_socket != null && _isConnected) {
      print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket');
      print('üì§ ChatId: $chatId, Content: $content');

      _socket!.emit('sendMessage', {
        'chatId': chatId,
        'content': content,
      });

      print('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket');
    } else {
      print('‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
  }

  void disconnect() {
    if (_socket != null) {
      print('üîå –û—Ç–∫–ª—é—á–∞–µ–º WebSocket');
      _socket!.disconnect();
      _socket = null;
      _isConnected = false;
    }
  }

  void dispose() {
    disconnect();
    _newMessageListeners.clear();
    onConnect = null;
    onDisconnect = null;
  }
}